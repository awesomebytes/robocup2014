#JSGF V1.0;
grammar general;


public <basic> = ((<action>) | (<action> [then] [and] <action> [and] [then] <action>)) | <garbage>;


<action> = <goto> | <fetch> | <bringit> | <askname> | <findp> | <follow> | <find> | <grasp> | <give> | <recognize> | <introduce>| <exit>;

<goto>   = <gocommand> to <determinant> (<location>|<loccategory>);
<fetch>  = <fetchcommand> <determinant> <item> from <determinant> (<location>|<loccategory>);
<bringit>= <bringcommand> (it | (<determinant> (<item> | <category>))) to <determinant> (<location>|<loccategory>);
<askname>= memorize the person | ask the person name;
<findp>  = <findcommand> a person;
<get>    = <getcommand> ([the] <item> | it );
<follow> = follow the person in front of you;
<find>   = <finditcmd> <determinant> (<item> | <category>);
<grasp>  = <graspcommand> (the <item> | it);
<give>   = <givecommand> me <determinant> <category>;
<recognize> = recognize (him | her| me);
<introduce> = tell something about yourself | introduce yourself;
<stay>   = stop here | wait there;
<exit> =  <exitcommand> the apartment;


<gocommand>   = go | move | navigate | guide me;
<fetchcommand>= retrieve | bring;
<bringcommand>= bring | carry;
<getcommand>  = retrieve | get | bring;
<findcommand> = find;
<finditcmd>   = detect | find | identify;
<graspcommand>= get | take | grasp;
<givecommand> = give | get;
<exitcommand> = exit | leave;

<determinant> = the | an | a | some;


<person> = andrew | charles | george | amanda | hannah | donald | frank | james | samuel | deborah | michelle | rebecca | taylor | paul | edward | referee | person;

<location> = kitchen table | kitchen counter | kitchen | hallway | bookshelf | living room | armchair | pantry | dinner table | working desk | lift | entrance | exit | referee;

<item> = cook book | spoon | coke | soda | chips | biscuits | cheese | seafood | corn flakes | pringles | beer | lemonade | milo | water | spoons | glass;

<category> = drink | food | utils;

<loccategory> = a table | a seat | a shelf | a door;

<garbage>  = <garbage2>;

<garbage1> = _unk;
<garbage2> = <garbage1> | (_unk _unk);
<garbage3> = <garbage2> | (_unk _unk _unk);
<garbage4> = <garbage3> | (_unk _unk _unk _unk);
<garbage5> = <garbage4> | (_unk _unk _unk _unk _unk);



